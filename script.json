{
	"config": {},
	"scripts": [
		{
			"name": "Demo",
			"source": [
				"const { Vector3, WebGL1Renderer } = await import(\"../third_party/three.module.js\");",
				"const { Effect } = await import(\"../effects/intro.js\");",
				"const { Composer } = await import(\"../js/Composer.js\");",
				"const { canDoTexLOD, canDoFloatLinear } = await import(\"../js/features.js\");",
				"const { settings } = await import(\"../js/settings.js\");",
				"",
				"const dom = resources.get( 'dom' );",
				"",
				"const renderer = new WebGL1Renderer({alpha: true, antialias: false, powerPreference: \"high-performance\", preserveDrawingBuffer: false});",
				"renderer.setPixelRatio(window.devicePixelRatio);",
				"renderer.setClearColor(0, 1);",
				"renderer.extensions.get(\"OES_standard_derivatives\");",
				"if (canDoTexLOD()) {",
				"  renderer.extensions.get(\"EXT_shader_texture_lod\");",
				"}",
				"if (canDoFloatLinear()) {",
				"  renderer.extensions.get(\"OES_texture_float\");",
				"  renderer.extensions.get(\"OES_texture_float_linear\");",
				"  renderer.extensions.get(\"WEBGL_color_buffer_float\");",
				"} else {",
				"  renderer.extensions.get(\"OES_texture_half_float\");",
				"  renderer.extensions.get(\"OES_texture_half_float_linear\");",
				"  renderer.extensions.get(\"EXT_color_buffer_half_float\");",
				"}",
				"dom.append(renderer.domElement);",
				"",
				"const composer = new Composer(renderer, 1, 1);",
				"",
				"const effects = [];",
				"",
				"const intro = new Effect(renderer);",
				"effects.push(intro);",
				"",
				"function render(t) {",
				"  intro.render(t);",
				"  composer.render(intro.post.fbo);",
				"}",
				"",
				"function resize() {",
				"\tlet w = window.innerWidth * settings.scale;",
				"\tlet h = window.innerHeight * settings.scale;",
				"\trenderer.setSize(w, h);",
				"\trenderer.domElement.style.width = \"100%\";",
				"\trenderer.domElement.style.height = \"100%\";",
				"",
				"\tconst dPR = window.devicePixelRatio;",
				"\tw *= dPR;",
				"\th *= dPR;",
				"\tintro.setSize(w, h);",
				"\tcomposer.setSize(w, h);",
				"}",
				"",
				"window.addEventListener(\"resize\", resize);",
				"",
				"",
				"const audio = document.createElement(\"audio\");",
				"audio.src = \"./assets/track.mp3\";",
				"audio.preload = true;",
				"const audioPromise = new Promise((resolve, reject) => {",
				"  audio.addEventListener(\"canplay\", (e) => {",
				"    resolve();",
				"  });",
				"});",
				"",
				"window.promises = [];",
				"",
				"async function init() {",
				"  console.log(\"Loading...\");",
				"  const preload = [audioPromise];",
				"  for (const effect of effects) {",
				"    preload.push(effect.initialise());",
				"  }",
				"  await Promise.all(preload);",
				"  resize();",
				"  console.log(\"Ready...\");",
				"}",
				"",
				"init();",
				" ",
				"intro.camera.fov = 50;",
				"intro.camera.updateProjectionMatrix();",
				"",
				"const cameraTarget = new Vector3();",
				" ",
				"resources.set('audio', audio);",
				"resources.set('intro', intro);",
				"resources.set('render', render);",
				"resources.set('camera', intro.camera);",
				"resources.set('cameraTarget', cameraTarget);"
			]
		},
		{
			"name": "Shape",
			"source": [
				"const intro = resources.get( 'intro' );",
				"",
				"const shape = {",
				"\tuniforms: intro.geoShader.uniforms,",
				"\tpostUniforms: intro.post.shader.uniforms,",
				"\treset: function () {",
				"\t\tintro.geoShader.uniforms.tetrahedronFactor.value = 0.0;",
				"\t\tintro.geoShader.uniforms.cubeFactor.value = 0.0;",
				"\t\tintro.geoShader.uniforms.octahedronFactor.value = 0.0;",
				"\t\tintro.geoShader.uniforms.icosahedronFactor.value = 0.0;",
				"\t\tintro.geoShader.uniforms.dodecahedronFactor.value = 0.0;",
				"\t\tintro.geoShader.uniforms.sphereFactor.value = 0.0;",
				"",
				"\t\tintro.geoShader.uniforms.exposureDiffuse.value = 0.5;",
				"\t\tintro.geoShader.uniforms.texScale.value = 0.1;",
				"\t\tintro.geoShader.uniforms.stripeFreq.value = 1.0;",
				"\t\tintro.geoShader.uniforms.stripeOffset.value = 1.0;",
				"",
				"\t\tintro.final.shader.uniforms.radius.value = 1.0;",
				"\t\tintro.blurStrength = 1.0;",
				"\t\tintro.final.shader.uniforms.exposure.value = 0.75;",
				"\t}",
				"}",
				"",
				"resources.set( 'shape', shape );"
			]
		}
	],
	"effects": [
		{
			"name": "Render",
			"source": [
				"var parameters = {};",
				"",
				"const render = resources.get( 'render' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\trender( progress * 200 );",
				"",
				"}"
			]
		},
		{
			"name": "Audio Player",
			"source": [
				"var audio = resources.get( 'audio' );",
				"",
				"function start(){",
				"",
				"\tplayer.setAudio( audio );",
				"",
				"}",
				"",
				"function end(){",
				"",
				"\tplayer.setAudio( null );",
				"",
				"}",
				"",
				"function update( progress ){}"
			]
		},
		{
			"name": "Camera Intro",
			"source": [
				"const camera = resources.get( 'camera' );",
				"const target = resources.get( 'cameraTarget' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"\t",
				"\tconst invProgress = 1 - progress;",
				"",
				"\tcamera.position.set( 0,  - 40 * invProgress, - 10 );",
				"",
				"\ttarget.x = Math.cos( progress * 8 ) * 4;",
				"\ttarget.y = Math.sin( progress * 4 ) * 4;",
				"\ttarget.z = - 20;",
				"\tcamera.lookAt( target );",
				"",
				"}"
			]
		},
		{
			"name": "Camera Side",
			"source": [
				"const camera = resources.get( 'camera' );",
				"const target = resources.get( 'cameraTarget' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"\t",
				"\tconst invProgress = 1 - progress;",
				"",
				"\tcamera.position.set( 4 - progress * 2, 1, - 7 * invProgress - 2 );",
				"\t",
				"\ttarget.x = Math.sin( progress * 4 ) * 2;",
				"\ttarget.y = Math.cos( progress * 5 );",
				"\ttarget.z = - 10 * invProgress + 2;",
				"\tcamera.lookAt( target );",
				"\tcamera.rotation.z = Math.PI / 2;",
				"",
				"}"
			]
		},
		{
			"name": "Camera Back",
			"source": [
				"const camera = resources.get( 'camera' );",
				"const target = resources.get( 'cameraTarget' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"\t",
				"\tconst invProgress = 1 - progress;",
				"",
				"\tcamera.position.set( 0, 0, invProgress * 10 + 4 );",
				"\t",
				"\ttarget.set( 0, - 6 * invProgress, 0 );",
				"\tcamera.lookAt( target );",
				"",
				"}"
			]
		},
		{
			"name": "Camera Orbit 1",
			"source": [
				"const camera = resources.get( 'camera' );",
				"const target = resources.get( 'cameraTarget' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"\t",
				"\tconst invProgress = 1 - progress;",
				"\t",
				"\tconst amount = - 10;",
				"\tconst distance = 4;",
				"",
				"\tcamera.position.x = Math.cos( progress * amount ) * distance;",
				"\tcamera.position.y = 0;",
				"\tcamera.position.z = Math.sin( progress * amount ) * distance;",
				"",
				"\ttarget.x = Math.cos( progress * 8 ) * 0.25;",
				"\ttarget.y = Math.sin( progress * 12 ) * 0.25;",
				"\ttarget.z = Math.sin( progress * 6 ) * 0.5;",
				"\tcamera.lookAt( target );",
				"\t",
				"}"
			]
		},
		{
			"name": "Camera Orbit 2",
			"source": [
				"const camera = resources.get( 'camera' );",
				"const target = resources.get( 'cameraTarget' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"\t",
				"\tconst invProgress = 1 - progress;",
				"\t",
				"\tconst amount = 7;",
				"\tconst distance = 3;",
				"",
				"\tcamera.position.x = Math.cos( progress * amount ) * distance;",
				"\tcamera.position.y = 0;",
				"\tcamera.position.z = Math.sin( progress * amount ) * distance;",
				"",
				"\ttarget.x = Math.cos( progress * 8 ) * 0.5;",
				"\ttarget.y = Math.sin( progress * 12 ) * 0.5;",
				"\ttarget.z = Math.sin( progress * 6 );",
				"\tcamera.lookAt( target );",
				"}"
			]
		},
		{
			"name": "Camera Top",
			"source": [
				"const camera = resources.get( 'camera' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"\t",
				"\tcamera.position.set( 0, 6, progress * 6 );",
				"\tcamera.rotation.set( - Math.PI / 2, 0, 0 );",
				"",
				"}"
			]
		},
		{
			"name": "Tetrahedron",
			"source": [
				"const shape = resources.get( 'shape' );",
				"",
				"function start(){",
				"",
				"\tshape.reset();",
				"\t",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tshape.uniforms.smoothness.value = 0.0;",
				"\tshape.uniforms.tetrahedronFactor.value = 1.0;",
				"}"
			]
		},
		{
			"name": "Cube",
			"source": [
				"const shape = resources.get( 'shape' );",
				"",
				"function start(){",
				"",
				"\tshape.reset();",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tconst invProgress = 1.0 - progress;",
				"",
				"\tshape.uniforms.smoothness.value = progress;",
				"\tshape.uniforms.cubeFactor.value = progress * 0.75;",
				"\tshape.uniforms.tetrahedronFactor.value = invProgress;",
				"",
				"\t",
				"}"
			]
		},
		{
			"name": "Effect",
			"source": [
				"var parameters = {",
				"\tvalue: new FRAME.Parameters.Float( 'Value', 1.0 )",
				"};",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		},
		{
			"name": "Octahedron",
			"source": [
				"const shape = resources.get( 'shape' );",
				"",
				"function start(){",
				"",
				"\tshape.reset();",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tconst invProgress = 1.0 - progress;",
				"",
				"\t// shape.uniforms.smoothness.value = progress;",
				"\tshape.uniforms.octahedronFactor.value = progress;",
				"\tshape.uniforms.cubeFactor.value = invProgress * 0.75;",
				"\t",
				"}"
			]
		},
		{
			"name": "Icosahedron",
			"source": [
				"const shape = resources.get( 'shape' );",
				"",
				"function start(){",
				"",
				"\tshape.reset();",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tconst invProgress = 1.0 - progress;",
				"",
				"\t// shape.uniforms.smoothness.value = progress;",
				"\tshape.uniforms.icosahedronFactor.value = progress;",
				"\tshape.uniforms.octahedronFactor.value = invProgress;",
				"",
				"\t",
				"}"
			]
		},
		{
			"name": "Dodecahedron",
			"source": [
				"const shape = resources.get( 'shape' );",
				"",
				"function start(){",
				"",
				"\tshape.reset();",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tconst invProgress = 1.0 - progress;",
				"",
				"\t// shape.uniforms.smoothness.value = progress;",
				"\tshape.uniforms.dodecahedronFactor.value = progress;",
				"\tshape.uniforms.icosahedronFactor.value = invProgress;",
				"",
				"\t",
				"}"
			]
		},
		{
			"name": "Sphere",
			"source": [
				"const shape = resources.get( 'shape' );",
				"",
				"function start(){",
				"",
				"\tshape.reset();",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tconst invProgress = 1.0 - progress;",
				"",
				"\t// shape.uniforms.smoothness.value = progress;",
				"\tshape.uniforms.sphereFactor.value = progress;",
				"\tshape.uniforms.dodecahedronFactor.value = invProgress;",
				"",
				"\t",
				"}"
			]
		},
		{
			"name": "Fade In",
			"source": [
				"const shape = resources.get( 'shape' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tshape.postUniforms.opacity.value = progress * 0.75 + 0.25;",
				"",
				"\t",
				"}"
			]
		},
		{
			"name": "Fade Out",
			"source": [
				"const shape = resources.get( 'shape' );",
				"",
				"function start(){",
				"",
				"\t// shape.postUniforms.opacity.value = 1;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tconst invProgress = 1.0 - progress;",
				"\tshape.postUniforms.opacity.value = invProgress;",
				"",
				"\t",
				"}"
			]
		},
		{
			"name": "Material",
			"source": [
				"const shape = resources.get( 'shape' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"\t",
				"\tconst invProgress = 1.0 - progress;",
				"\t",
				"\tshape.uniforms.baseColor.value.x = 0;",
				"\tshape.uniforms.baseColor.value.y = 0;",
				"\tshape.uniforms.baseColor.value.z = 2;",
				"",
				"\tshape.uniforms.smoothness.value = progress;",
				"\tshape.uniforms.roughness.value = invProgress;",
				"\tshape.uniforms.normalScale.value = invProgress;",
				"\t",
				"\tshape.uniforms.exposureSpecular.value = progress;",
				"\t",
				"}"
			]
		},
		{
			"name": "Wiggy wiggy",
			"source": [
				"const shape = resources.get( 'shape' );",
				"",
				"function start(){",
				"",
				"\tshape.uniforms.stripeColor.value.x = 0;",
				"\tshape.uniforms.stripeColor.value.y = 0;",
				"\tshape.uniforms.stripeColor.value.z = 0;",
				"",
				"}",
				"",
				"function end(){",
				"",
				"\tshape.uniforms.stripeColor.value.x = 0;",
				"\tshape.uniforms.stripeColor.value.y = 0;",
				"\tshape.uniforms.stripeColor.value.z = 0;",
				"",
				"}",
				"",
				"function update( progress ){",
				"",
				"\tshape.uniforms.stripeFreq.value = 9;",
				"\tshape.uniforms.stripeColor.value.x = Math.abs( Math.sin( progress * Math.PI * 4 ) ) * 3;",
				"",
				"}"
			]
		},
		{
			"name": "Fade Null",
			"source": [
				"const shape = resources.get( 'shape' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tshape.postUniforms.opacity.value = 1;",
				"",
				"\t",
				"}"
			]
		}
	],
	"animations": [
		{
			"name": "",
			"start": 0,
			"end": 93.3,
			"layer": 0,
			"effectId": 1,
			"enabled": true
		},
		{
			"name": "",
			"start": 0,
			"end": 10.869036255162927,
			"layer": 1,
			"effectId": 2,
			"enabled": true
		},
		{
			"name": "",
			"start": 0,
			"end": 20,
			"layer": 2,
			"effectId": 8,
			"enabled": true
		},
		{
			"name": "",
			"start": 0,
			"end": 93.32,
			"layer": 3,
			"effectId": 17,
			"enabled": true
		},
		{
			"name": "",
			"start": 0,
			"end": 2,
			"layer": 5,
			"effectId": 15,
			"enabled": true
		},
		{
			"name": "",
			"start": 0,
			"end": 93.3125,
			"layer": 6,
			"effectId": 0,
			"enabled": true
		},
		{
			"name": "Animation",
			"start": 1.1875,
			"end": 3.1875,
			"layer": -1,
			"effectId": 10,
			"enabled": true
		},
		{
			"name": "",
			"start": 2,
			"end": 87.8,
			"layer": 5,
			"effectId": 19,
			"enabled": true
		},
		{
			"name": "",
			"start": 10.873625516291883,
			"end": 21.956048636744423,
			"layer": 1,
			"effectId": 3,
			"enabled": true
		},
		{
			"name": "",
			"start": 20.5625,
			"end": 22,
			"layer": 2,
			"effectId": 9,
			"enabled": true
		},
		{
			"name": "",
			"start": 21.94687011448651,
			"end": 32.89155350639713,
			"layer": 1,
			"effectId": 4,
			"enabled": true
		},
		{
			"name": "",
			"start": 32.8949555337806,
			"end": 43.90522361680466,
			"layer": 1,
			"effectId": 5,
			"enabled": true
		},
		{
			"name": "",
			"start": 33.549542682926834,
			"end": 35.862042682926834,
			"layer": 2,
			"effectId": 11,
			"enabled": true
		},
		{
			"name": "",
			"start": 43.88178962690344,
			"end": 54.76260883029899,
			"layer": 1,
			"effectId": 6,
			"enabled": true
		},
		{
			"name": "",
			"start": 44.8125,
			"end": 47.15625,
			"layer": 2,
			"effectId": 12,
			"enabled": true
		},
		{
			"name": "",
			"start": 54.769329382685434,
			"end": 65.8384155893726,
			"layer": 1,
			"effectId": 5,
			"enabled": true
		},
		{
			"name": "",
			"start": 56.03125,
			"end": 58.4375,
			"layer": 2,
			"effectId": 13,
			"enabled": true
		},
		{
			"name": "",
			"start": 58.8125,
			"end": 60.0625,
			"layer": 4,
			"effectId": 18,
			"enabled": true
		},
		{
			"name": "",
			"start": 64.28125,
			"end": 65.53125,
			"layer": 4,
			"effectId": 18,
			"enabled": true
		},
		{
			"name": "",
			"start": 65.83409090012138,
			"end": 76.81118804358601,
			"layer": 1,
			"effectId": 6,
			"enabled": true
		},
		{
			"name": "",
			"start": 66.8125,
			"end": 70.125,
			"layer": 2,
			"effectId": 14,
			"enabled": true
		},
		{
			"name": "",
			"start": 76.80023880904011,
			"end": 93.29886084431503,
			"layer": 1,
			"effectId": 7,
			"enabled": true
		},
		{
			"name": "",
			"start": 87.8,
			"end": 93.3125,
			"layer": 5,
			"effectId": 16,
			"enabled": true
		}
	]
}
